trainActivities <- fread(file.path(path, "UCI HAR Dataset/train/Y_train.txt")
, col.names = c("Activity"))
trainSubjects <- fread(file.path(path, "UCI HAR Dataset/train/subject_train.txt")
, col.names = c("SubjectNum"))
train <- cbind(trainSubjects, trainActivities, train)
# Load test datasets
test <- fread(file.path(path, "UCI HAR Dataset/test/X_test.txt"))[, featuresWanted, with = FALSE]
data.table::setnames(test, colnames(test), measurements)
testActivities <- fread(file.path(path, "UCI HAR Dataset/test/Y_test.txt")
, col.names = c("Activity"))
testSubjects <- fread(file.path(path, "UCI HAR Dataset/test/subject_test.txt")
, col.names = c("SubjectNum"))
test <- cbind(testSubjects, testActivities, test)
# merge datasets
combined <- rbind(train, test)
# Convert classLabels to activityName basically. More explicit.
combined[["Activity"]] <- factor(combined[, Activity]
, levels = activityLabels[["classLabels"]]
, labels = activityLabels[["activityName"]])
combined[["SubjectNum"]] <- as.factor(combined[, SubjectNum])
combined <- reshape2::melt(data = combined, id = c("SubjectNum", "Activity"))
combined <- reshape2::dcast(data = combined, SubjectNum + Activity ~ variable, fun.aggregate = mean)
data.table::fwrite(x = combined, file = "tidyData.txt", quote = FALSE)
# Getting and Cleaning Data Project John Hopkins Coursera
# Author: Michael Galarnyk
# 1. Merges the training and the test sets to create one data set.
# 2. Extracts only the measurements on the mean and standard deviation for each measurement.
# 3. Uses descriptive activity names to name the activities in the data set
# 4. Appropriately labels the data set with descriptive variable names.
# 5. From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
# Load Packages and get the Data
packages <- c("data.table", "reshape2")
sapply(packages, require, character.only=TRUE, quietly=TRUE)
path <- getwd()
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url, file.path(path, "dataFiles.zip"))
unzip(zipfile = "dataFiles.zip")
# Load activity labels + features
activityLabels <- fread(file.path(path, "UCI HAR Dataset/activity_labels.txt")
, col.names = c("classLabels", "activityName"))
features <- fread(file.path(path, "UCI HAR Dataset/features.txt")
, col.names = c("index", "featureNames"))
featuresWanted <- grep("(mean|std)\\(\\)", features[, featureNames])
measurements <- features[featuresWanted, featureNames]
measurements <- gsub('[()]', '', measurements)
# Load train datasets
train <- fread(file.path(path, "UCI HAR Dataset/train/X_train.txt"))[, featuresWanted, with = FALSE]
data.table::setnames(train, colnames(train), measurements)
trainActivities <- fread(file.path(path, "UCI HAR Dataset/train/Y_train.txt")
, col.names = c("Activity"))
trainSubjects <- fread(file.path(path, "UCI HAR Dataset/train/subject_train.txt")
, col.names = c("SubjectNum"))
train <- cbind(trainSubjects, trainActivities, train)
# Load test datasets
test <- fread(file.path(path, "UCI HAR Dataset/test/X_test.txt"))[, featuresWanted, with = FALSE]
data.table::setnames(test, colnames(test), measurements)
testActivities <- fread(file.path(path, "UCI HAR Dataset/test/Y_test.txt")
, col.names = c("Activity"))
testSubjects <- fread(file.path(path, "UCI HAR Dataset/test/subject_test.txt")
, col.names = c("SubjectNum"))
test <- cbind(testSubjects, testActivities, test)
# merge datasets
combined <- rbind(train, test)
# Convert classLabels to activityName basically. More explicit.
combined[["Activity"]] <- factor(combined[, Activity]
, levels = activityLabels[["classLabels"]]
, labels = activityLabels[["activityName"]])
combined[["SubjectNum"]] <- as.factor(combined[, SubjectNum])
combined <- reshape2::melt(data = combined, id = c("SubjectNum", "Activity"))
combined <- reshape2::dcast(data = combined, SubjectNum + Activity ~ variable, fun.aggregate = mean)
data.table::fwrite(x = combined, file = "tidyData.txt", quote = FALSE)
combine()
fread(file = tidyData.txr)
fread(file = tidyData.txt)
test
train
trainActivities
trainSubjects
train
activityLabels
featuresWanted
measurements
train
combined
combined
install_from_swirl("Exploratory Data Analysis")
# Merges the training and the test sets to create one data set.
# Extracts only the measurements on the mean and standard deviation for each measurement.
# Uses descriptive activity names to name the activities in the data set
# Appropriately labels the data set with descriptive variable names.
# From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
# Loading and getting
packages <- c("data.table", "reshape2")
sapply(packages, require, character.only=TRUE, quietly=TRUE)
path <- getwd()
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url, file.path(path, "dataFiles.zip"))
unzip(zipfile = "dataFiles.zip")
# Load activity
activityLabels <- fread(file.path(path, "UCI HAR Dataset/activity_labels.txt")
, col.names = c("classLabels", "activityName"))
features <- fread(file.path(path, "UCI HAR Dataset/features.txt")
, col.names = c("index", "featureNames"))
featuresWanted <- grep("(mean|std)\\(\\)", features[, featureNames])
measurements <- features[featuresWanted, featureNames]
measurements <- gsub('[()]', '', measurements)
# Load train datasets
train <- fread(file.path(path, "UCI HAR Dataset/train/X_train.txt"))[, featuresWanted, with = FALSE]
data.table::setnames(train, colnames(train), measurements)
trainActivities <- fread(file.path(path, "UCI HAR Dataset/train/Y_train.txt")
, col.names = c("Activity"))
trainSubjects <- fread(file.path(path, "UCI HAR Dataset/train/subject_train.txt")
, col.names = c("SubjectNum"))
train <- cbind(trainSubjects, trainActivities, train)
# Load test datasets
test <- fread(file.path(path, "UCI HAR Dataset/test/X_test.txt"))[, featuresWanted, with = FALSE]
data.table::setnames(test, colnames(test), measurements)
testActivities <- fread(file.path(path, "UCI HAR Dataset/test/Y_test.txt")
, col.names = c("Activity"))
testSubjects <- fread(file.path(path, "UCI HAR Dataset/test/subject_test.txt")
, col.names = c("SubjectNum"))
test <- cbind(testSubjects, testActivities, test)
# merging
combined <- rbind(train, test)
# Converting
combined[["Activity"]] <- factor(combined[, Activity]
, levels = activityLabels[["classLabels"]]
, labels = activityLabels[["activityName"]])
combined[["SubjectNum"]] <- as.factor(combined[, SubjectNum])
combined <- reshape2::melt(data = combined, id = c("SubjectNum", "Activity"))
combined <- reshape2::dcast(data = combined, SubjectNum + Activity ~ variable, fun.aggregate = mean)
data.table::fwrite(x = combined, file = "tidy_data.txt", quote = FALSE, row.names = FALSE)
pwd
ls
source("read_and_clean_data.R")
getwd()
dir
ls
dir
dir()
cd JHU_C04_P01
cd JHU_C04_P01
;s''
ls
!ls
ls
dir
ls()
cd()
cd
pwd
ls
dir()
setwd("E:/!SaveMyFiles/R.Learing/JHU_C04_P01")
getwd()
;s
plot1(data)
# plot2(data)
# plot3(data)
#050914
source("read_and_clean_data.R")
source("plot1.R")
source("plot2.R")
source("plot3.R")
source("plot4.R")
read_and_clean_data()
# plot1(data)
# plot2(data)
# plot3(data)
data
head(data)
data<-read.table(file="household_power_consumption.txt",head=TRUE,sep=";",colClasses=c("character","character","character","character","character","character","character","character","character"))
head(data)
data<-read.table(file="household_power_consumption.txt",head=TRUE,sep=";",colClasses=c("character","character","character","character","character","character","character","character","character"))
head(data)
head(data)
data <- read.table(file="household_power_consumption.txt",head=TRUE,sep=";",colClasses=c("character","character","character","character","character","character","character","character","character"))
data <- subset(data, Date=="1/2/2007" | Date=="2/2/2007")
head(data)
data <- data[!apply(data, 1, function(x) {any(x == "?")}),]
head(data)
isnull(data)
is.null(data)
data_raw <- read.table(file="household_power_consumption.txt",head=TRUE,sep=";",colClasses=c("character","character","character","character","character","character","character","character","character"))
# only be using data from the dates 2007-02-01 and 2007-02-02.
data_part <- subset(data_raw, Date=="1/2/2007" | Date=="2/2/2007")
data <- data_part[!apply(data_part, 1, function(x) {any(x == "?")}),]
is.null(data)
is.null(data_part)
data_raw <- read.table(file="household_power_consumption.txt",head=TRUE,sep=";",colClasses=c("character","character","character","character","character","character","character","character","character"))
# only be using data from the dates 2007-02-01 and 2007-02-02.
data_part <- subset(data_raw, Date=="1/2/2007" | Date=="2/2/2007")
# missing values are coded as ?.
data <- data_part[!apply(data_part, 1, function(x) {any(x == "?")}),]
data$Date<-as.Date(data$Date,"%d/%m/%Y")
data$Time <- chron(times=data$Time)
data$Global_active_power<-as.numeric(data$Global_active_power)
data$Global_reactive_power<-as.numeric(data$Global_reactive_power)
data$Voltage<-as.numeric(data$Voltage)
data$Global_intensity<-as.numeric(data$Global_intensity)
data$Sub_metering_1<-as.numeric(data$Sub_metering_1)
data$Sub_metering_2<-as.numeric(data$Sub_metering_2)
data$Sub_metering_3<-as.numeric(data$Sub_metering_3)
head(data)
assign("data",data,envir = .GlobalEnv)
head(data)
getwd()
setwd("E:/!SaveMyFiles/R.Learing/JHU_C04_P01/ExData_Plotting1")
# Coursera and Johns Hopkins University
# Data Science Specialization
# Course04 : Exploratory Data Analysis
# Project01 : ExData_Plotting1
# 2019-02-27
data_raw <- read.table(file="household_power_consumption.txt",head=TRUE,sep=";",colClasses=c("character","character","character","character","character","character","character","character","character"))
# only be using data from the dates 2007-02-01 and 2007-02-02.
data_part <- subset(data_raw, Date=="1/2/2007" | Date=="2/2/2007")
# missing values are coded as ?.
data <- data_part[!apply(data_part, 1, function(x) {any(x == "?")}),]
data$Date<-as.Date(data$Date,"%d/%m/%Y")
data$Time <- chron(times=data$Time)
data$Global_active_power<-as.numeric(data$Global_active_power)
data$Global_reactive_power<-as.numeric(data$Global_reactive_power)
data$Voltage<-as.numeric(data$Voltage)
data$Global_intensity<-as.numeric(data$Global_intensity)
data$Sub_metering_1<-as.numeric(data$Sub_metering_1)
data$Sub_metering_2<-as.numeric(data$Sub_metering_2)
data$Sub_metering_3<-as.numeric(data$Sub_metering_3)
assign("data", data, envir = .GlobalEnv)
# head(data)
source("plot1.R")
plot1(data)
data$Global_reactive_power
unique(data$Global_reactive_power)
hist(unique(data$Global_reactive_power))
hist(unique(data$Global_active_power))
head(data$Global_active_power)
plot(data$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)", lab=c(3,4,31) , xaxt = "n")
plot(data$Global_active_power)
# source("plot1.R")
# plot1(data)
#
# plot(data$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)", lab=c(3,4,31) , xaxt = "n")
plot(data$Global_active_power,type="l")
# source("plot1.R")
# plot1(data)
#
# plot(data$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)", lab=c(3,4,31) , xaxt = "n")
plot(data$Global_active_power,type="l", ylab="Global Active Power (kilowatts)")
# source("plot1.R")
# plot1(data)
#
# plot(data$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)", lab=c(3,4,31) , xaxt = "n")
plot(data$Global_active_power,type="l", xlab="", ylab="Global Active Power (kilowatts)")
# source("plot1.R")
# plot1(data)
#
# plot(data$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)", lab=c(3,4,31) , xaxt = "n")
plot(data$Global_active_power,type="l", xlab="", ylab="Global Active Power (kilowatts)", xaxt = "n")
# source("plot1.R")
# plot1(data)
#
# plot(data$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)", lab=c(3,4,31) , xaxt = "n")
plot(data$Global_active_power,type="l", xlab="", ylab="Global Active Power (kilowatts)", xaxt = "n", lab=c(3,4,31))
# source("plot1.R")
# plot1(data)
#
# plot(data$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)", lab=c(3,4,31) , xaxt = "n")
plot(data$Global_active_power,type="l", xlab="", ylab="Global Active Power (kilowatts)", xaxt = "n", lab=c(3,4,31))
plot(data$Global_active_power,type="l", xlab="", ylab="Global Active Power (kilowatts)", xaxt = "n", lab=c(3,4,31))
head(data)
data
View(data$Date, data$Global_active_power)
View(data$Date)
lapply(data, function(x) colMeans(x[x, c("Global_reactive_power")]))
lapply(data, function(x) colMeans(x[, c("Date","Global_reactive_power")]))
lapply(data, function(x) colMeans(x[, c("Date","Global_reactive_power")]))
lapply(1, function(x) colMeans(x[, c("Date","Global_reactive_power")]))
lab="", ylab="Global Active Power (kilowatts)", xaxt = "n")
axis(side=1, labels=c("Thu","Fri","Sat"))
="l", xlab="", ylab="Global Active Power (kilowatts)", xaxt = "n")
axis(side=1,
plot(data$Global_active_power,type="l", xlab="", ylab="Global Active Power (kilowatts)", xaxt = "n")
axis(side=1, at=c(1, 1442, 2881), labels=c("Thu","Fri","Sat"))
plot(data$Global_active_power,type="l", xlab="", ylab="Global Active Power (kilowatts)", xaxt = "n")
axis(side=1, at=c(1, 1442, 2881), labels=c("Thu","Fri","Sat"))
plot(data$Global_active_power,type="l", xlab="", ylab="Global Active Power (kilowatts)", xaxt = "n")
axis(side=1, at=c(1, 1442, 2000), labels=c("Thu","Fri","Sat"))
plot(data$Global_active_power,type="l", xlab="", ylab="Global Active Power (kilowatts)")
axis(side=1, at=c(1, 1442, 2000), labels=c("Thu","Fri","Sat"))
plot(data$Global_active_power,type="l", xlab="", ylab="Global Active Power (kilowatts)", xaxt = "n")
axis(side=1, at=c(1, 1442, 2000), labels=c("Thu","Fri","Sat"))
head(data)
count.fields(data)
dim(data)
nrow(data)
plot(data$Global_active_power,type="l", xlab="", ylab="Global Active Power (kilowatts)", xaxt = "n")
axis(side=1, at=c(1, 1442, nrow(data)), labels=c("Thu","Fri","Sat"))
data$Date
head(data$Date, 1000:1100)
tail(data$Date, 1000)
ifelse(data$Data >= 2007-02-02, "pass", "fail")
tt <- ifelse(data$Data >= 2007-02-02, "pass", "fail")
tt
tt <- ifelse(data$Data >= "2007-02-02", "pass", "fail")
tt
view(data$Date)
View(data$Date)
readLines(data,1440)
source("plot1.R")
plot1(data)
source("plot2.R")
plot2(data)
plot(c(data$Sub_metering_1), type="l", xlab="", ylab="Energy sub metering", xaxt = "n")
axis(side=1, at=c(1, 1441, nrow(data)), labels=c("Thu","Fri","Sat"))
plot(c(data$Sub_metering_1), type="l", xlab="", ylab="Energy sub metering", xaxt = "n")
axis(side=1, at=c(1, 1441, nrow(data)), labels=c("Thu","Fri","Sat"))
lines(data$Sub_metering_2,col="red")
lines(data$Sub_metering_3,col="blue")
legend("topright","left",c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),col=c("black","red","blue"),lty=1)
source("plot3.R")
plot3(data)
# lapply, function(x) colMeans(x[, c("Date","Global_reactive_power")]))
at_val <- c(1, 1441, nrow(data))
png(filename ="plot4.png", width = 480, height = 480)
par(mfrow=c(2,2))
plot(data$Global_active_power, type="l", xlab="", ylab="Global Active Power", lab=c(3,4,31) , xaxt = "n")
axis(side=1, at=at_val, labels=c("Thu","Fri","Sat"))
plot(c(data$Voltage), type="l", xlab="datetime", ylab="Voltage", lab=c(3,7,31) , xaxt = "n")
axis(side=1, at=at_val, labels=c("Thu","Fri","Sat"))
plot(c(data$Sub_metering_1), type="l", xlab="", ylab="Energy sub metering", lab=c(3,4,31) , xaxt = "n")
axis(side=1, at=at_val, labels=c("Thu","Fri","Sat"))
lines(data$Sub_metering_2,col="red")
lines(data$Sub_metering_3,col="blue")
legend("topright","left",c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),col=c("black","red","blue"),lty=1, bty="n")
plot(c(data$Global_reactive_power), type="l", xlab="datetime", ylab="Global_reactive_power", lab=c(3,6,31) , xaxt = "n")
axis(side=1, at=at_val, labels=c("Thu","Fri","Sat"))
dev.off()
source("plot4.R")
plot4(data)
clc
clr
install.packages("swirl")
packageVersion("swirl")
library(swirl)
exit()
exit
install_from_swirl("Exploratory Data Analysis")
swirl()
swirl
swirl()
head(pollution)
dim(pollution)
pollution$pm25
summary(pollution$pm25)
quantile(pollution)
quantile(pollution$pm25)
quantile(ppm)
boxplot(ppm, col='blue')
abline(h=12)
hist(ppm, col='green')
rug(ppm)
rug(ppm<5)
low
high
hist(ppm, col='green',breaks = 100)
rug(ppm)
hist(ppm, col = 'green')
abline(v = 12, lwd=2)
abline(v=median(ppm), col='magenta',lwd =4)
info(pollution$pm23)
info(pollution$pm25)
info(pollution$pm25)
pollution$pm25
names(pollution)
reg <- pollution$region
head(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col = 'wheat',main = 'Number of Counties in Each Region')
boxplot(pollution, col = 'red')
boxplot(pollution$pm25, col = 'red')
boxplot(pm25~region, data = pollution, col = 'red')
par(mfrow=c(2,1),mar=c(4,4,2,1,))
par(mfrow=c(2,1),mar=c(4,4,2,1))
subset(pollution$pm25)
east <- subset(pollution$pm25)
east <- subset(pollution$pm25)
east <- subset(pollution)
east <- subset(pollution, region=='east')
east
head(east)
hist(east$pm25, col = 'green')
west <- subset(pollution, region=='west')
hist(subset(pollution, region=='west')$pm25, col='green')
;'\'
j
plot
with(pollution, plot(latitude, pm25))
abline(h=12, lwd=2, lyt=2)
abline(h=12, lwd=2, lty=2)
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
with(subset(pollution, region='west')$pm25)
eval(substitute(expr), data, enclos = parent.frame())
with(subset(pollution, region=='west')$pm25)
plot(subset(pollution, region=='west')$pm25)
west <- subset(pollution,region=="west")
plot(west$latitude, west$pm25, main = 'West')
east <- subset(pollution,region=="east")
plot(east$latitude, east$pm25, main = 'East')
?Devices
plot()
plot(dataset)
plot(east, west)
with(faitful, plot(eruptions, waiting))
with(faithful, plot(eruptions, waiting))
with(faithful, plot(eruptions, waiting, main = 'Old Faithful Geyser data'))
title(main = "Old Faithful Geyser data")
dev.cur()
getwd
ls
!ls
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting, main = 'Old Faithful Geyser data'))
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png,qeyserplot.png)
dev.copy(png,'qeyserplot.png')
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
plot(cars$speed, cars$dist)
with(cars, plot(speed, dist))
with(cars, mean(cars$speed), max(cars$dist))
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
dim(state$region)
table(state$region)
xyplot(Life.Exp, Income, c(4,1))
xyplot(state$Life.Exp, state$Income, c(4,1))
xyplot(state$Life.Exp, state$Income, layout(4,1))
a
f
?
xyplot()
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
ggplot(mpg)
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
boxplot(airquality$Month)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab=)
boxplot(Ozone~Month, airquality, xlab='Month', ylab='')
boxplot(Ozone~Month, airquality, xlab='Month', ylab='Ozone (ppb)', col.axis='blue', col.lab='red')
dev.cur()
dev.off()
title(main='Ozone and Wind in New York City')
boxplot(Ozone~Month, airquality, xlab='Month', ylab='Ozone (ppb)', col.axis='blue', col.lab='red')
title(main='Ozone and Wind in New York City')
dev.cur()
with(airquality, plot(Wind, Ozone))
title(main='Ozone and Wind in New York City')
length(par())
par()
names(par())
par()$pin
par('fg')
(?pch)
par()$pch
par('lty')
plot(airquality$Wind, airquality$Ozone, type='n')
title(main = 'Wind and Ozone in NYC')
may <- subset(airquality)
may <- subset(airquality, Month==5)
points(may$Wind, may$Ozone, col = 'blue')
points(may$Wind, may$Ozone, col = 'blue', pch=17)
notmay <- subset(airquality)
notmay <- subset(airquality, Month!=5)
points(notmay$Wind, notmay$Ozone, col = 'red', pch=17)
points(notmay$Wind, notmay$Ozone, col = 'red', pch=8)
legend('topright', c(17,8), c('blue', 'red'), c('May', 'Other Months'))
legend(topright, c(17,8), c('blue', 'red'), c('May', 'Other Months'))
legend(legend = 'topright', c(17,8), c('blue', 'red'), c('May', 'Other Months'))
legend(legend = 'topright', c(17,8), c('blue', 'red'), c('May', 'Other Months'))
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
clear
swirl()
library(swirl)
swirl()
